AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Template To Create Lambda Function

Parameters:
  LambdaName:
    Description: Function Name
    Type: String
    Default: LambdaFunctionName
  FunctionRuntime:
    Description: Lambda Function Runtime
    Type: String
    AllowedValues:
      - python3.7
      - nodejs10.x
      - dotnetcore3.1
      - java8
      - java11
    Default: python3.7
  BucketName:
    Type: String
    Description: Bucket name
    Default:  LambdaFunctionBucket
  BucketKeyFunction:
    Type: String
    Description: Name of function in bucket
    Default: function.zip
  VersioningConfiguration:
    Type: String
    Description: Bucket versioning
    Default: Suspended
    AllowedValues:
      - Suspended
      - Enabled
  
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !Ref VersioningConfiguration

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaFunctionRole
      - Bucket
    Properties:
      FunctionName: !Ref LambdaName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref BucketKeyFunction
      Runtime: !Ref FunctionRuntime
      Timeout: 5
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds:
          - !Ref FunctionVPCSubnetId
      KmsKeyArn: !Ref FunctionKms
      Tags:
        - Key: Name
          Value: !Ref LambdaName
      Environment:
        Variables:
          ApplicationName: !Ref LambdaName
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3 Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: '*'
        - PolicyName: Logs Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

Outputs:
  LambdaArn:
    Description: Arn of Lambda Function
    Export:
      Name: !Join [':', [!Ref 'AWS:StackName', 'LambdaFunction', 'Arn']]
    Value:
      Fn::GetAtt: LambdaFunction.Arn
  BucketName:
    Description: Name of created bucket
    Export:
      Name: !Join [':', [!Ref 'AWS:StackName', 'Bucket', 'Name']]
    Value: !Ref Bucket
